import telebot
import os
import sys
import django

project_path = os.path.dirname(os.path.abspath('../../main.py'))
sys.path.append(project_path)
os.environ["DJANGO_SETTINGS_MODULE"] = "tune.settings"
django.setup()
TOKEN = '5376806714:AAHYWieOq1EM6VYgSI1HmbDE0ttaHVIfMsY'
client = telebot.TeleBot(TOKEN)
path_to_media = 'C:\\Users\\luky\\PycharmProjects\\tune\\media\\'
import trade_id.models as repair_models
from trade_in.models import TelegramUserModel


@client.message_handler(func=lambda message: message.text == '–ó–∞–ø—É—Å–∫')
@client.message_handler(func=lambda message: message.text == '–ù–∞—á–∞–ª–æ')
@client.message_handler(func=lambda message: message.text == '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞')
@client.message_handler(func=lambda message: message.text == '–ù–∞—á–∞—Ç—å')
@client.message_handler(func=lambda message: message.text == '–°—Ç–∞—Ä—Ç')
@client.message_handler(func=lambda message: message.text == '‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
@client.message_handler(commands=['start'])
def start_message(message, text='–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏?'):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = telebot.types.KeyboardButton('üí•–°–∫–∏–¥–∫–∏üí•')
    btn2 = telebot.types.KeyboardButton('–ù–æ–≤—ã–µ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
    btn3 = telebot.types.KeyboardButton('–ë/–£ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
    btn4 = telebot.types.KeyboardButton('Trade-in / –ü—Ä–æ–¥–∞–∂–∞')
    btn5 = telebot.types.KeyboardButton('–ú–æ–π –±—é–¥–∂–µ—Ç')
    btn6 = telebot.types.KeyboardButton('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –æ–±–º–µ–Ω–∫–∏')
    btn7 = telebot.types.KeyboardButton('FAQ')
    btn8 = telebot.types.KeyboardButton('–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º')
    btn9 = telebot.types.KeyboardButton('–†–µ–º–æ–Ω—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤')
    markup.add(btn1)
    markup.add(btn2, btn3)
    markup.add(btn4, btn5)
    markup.add(btn6, btn7)
    markup.add(btn8, btn9)
    client.send_message(message.chat.id, text=text, reply_markup=markup)


@client.message_handler(func=lambda message: message.text == '–†–µ–º–æ–Ω—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤')
def main_menu_repair(message, text='–í—ã–±–∏—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'):
    repair_models.UserChoiceModel.objects.filter(
        user_id=TelegramUserModel.objects.get(
            user_id=message.chat.id
        ).id
    ).delete()

    buttons = repair_models.ButtonModel.objects.all()
    buttons = [['üîß ' + i.name_button] for i in buttons]
    buttons.append(['‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
    keyboard_products = telebot.types.ReplyKeyboardMarkup(True, True)
    keyboard_products.keyboard = buttons
    client.send_message(chat_id=message.chat.id,
                        text=text,
                        reply_markup=keyboard_products)


@client.message_handler(func=lambda message: message.text.split()[0] == 'üîß')
def service_repair(message):
    device = message.text.replace('üîß ', '')
    id_user = TelegramUserModel.objects.get(
        user_id=message.chat.id
    ).id
    user_device = repair_models.UserChoiceModel.objects.filter(
        user_id=id_user
    )
    if not user_device:
        user_query = TelegramUserModel.objects.get(
            user_id=message.chat.id,
        )
        user_device = repair_models.UserChoiceModel.objects.create(
            user_id=user_query,
            cost=0,
            device=device
        )
        buttons = repair_models.ServiceModels.objects.filter(
            series__name_button=message.text.replace('üîß ', '')
        )
        buttons = [['–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å—É–º–º—É —Ä–µ–º–æ–Ω—Ç–∞']] + [['üîß ' + i.name] for i in buttons]
        buttons.append(['‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
        keyboard_products = telebot.types.ReplyKeyboardMarkup(True, True)
        keyboard_products.keyboard = buttons
        client.send_message(chat_id=message.chat.id,
                            text='text',
                            reply_markup=keyboard_products)
        return 1

    else:
        user_cost = user_device[0].cost
        user_device = user_device[0].device
        up = repair_models.ServiceModels.objects.filter(
            series__name_button=user_device,
            name=device
        )

        buttons = repair_models.ButtonModel.objects.get(
            name_button=user_device
        )
        buttons = repair_models.ServiceModels.objects.filter(
            series=buttons
        )
        id_user = TelegramUserModel.objects.get(
            user_id=message.chat.id
        )
        id_user = repair_models.UserChoiceModel.objects.get(
            user_id=id_user
        )
        xx = repair_models.UseService.objects.filter(
            user=id_user,
        )
        if message.text in [i.name_service for i in xx]:
            pass
        else:
            repair_models.UseService.objects.create(
                user=id_user,
                name_service=message.text
            )
            repair_models.UserChoiceModel.objects.update(
                device=user_device,
                cost=str(int(user_cost) + int(up[0].cost))
            )
        buttons = [['–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å—É–º–º—É —Ä–µ–º–æ–Ω—Ç–∞']] + [['üîß ' + i.name] for i in buttons]
        buttons.append(['‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
        keyboard_products = telebot.types.ReplyKeyboardMarkup(True, True)
        keyboard_products.keyboard = buttons
        client.send_message(chat_id=message.chat.id,
                            text=f'{message.text.replace("üîß ", "")}'
                                 f'\n\n'
                                 f'–£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞',
                            reply_markup=keyboard_products)


@client.message_handler(func=lambda message: message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å—É–º–º—É —Ä–µ–º–æ–Ω—Ç–∞')
def service_repair_exit(message):
    services = repair_models.UseService.objects.filter(
        user_id=repair_models.UserChoiceModel.objects.filter(
            user_id=TelegramUserModel.objects.get(
                user_id=message.chat.id
            ).id
        )[0].id
    )
    cost = repair_models.UserChoiceModel.objects.filter(
        user_id=TelegramUserModel.objects.get(
            user_id=message.chat.id
        ).id
    )[0].cost
    print(cost)
    text = "".join([' -- ' + i.name_service.replace("üîß ", "")
                    + '\n' for i in services])
    text = '–í—ã–±—Ä–∞–Ω—ã–µ —É—Å–ª—É–≥–∏: \n' + text
    text = text + f'\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:\n{str(cost)} —Ä—É–±–ª–µ–π'

    start_message(
        message=message,
        text=text
    )


# client.polling(non_stop=True)
