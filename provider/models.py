import datetime

from django.db import models

from tune_admin.models import Category, SeriesCategory, get_deadline, Product, states, choices_kit, choices_guaranty, \
    choices_smile, GuarantyModel, KitModel, StateModel
from tune_admin.text_default import text_default

today = datetime.date.today()
tomorrow = today + datetime.timedelta(days=4)
default_guaranty = '–ì–∞—Ä–∞–Ω—Ç–∏—è –æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É 3 –º–µ—Å—è—Ü–∞ !‚úÖ'
default_text = text_default


class ProviderProduct(models.Model):
    """
        –ú–æ–¥–µ–ª—å —Ç–æ–≤–∞—Ä–∞
        """

    image_1 = models.ImageField('–ö–∞—Ä—Ç–∏–Ω–∫–∞ 1',
                                upload_to='',
                                null=False,
                                )
    image_2 = models.ImageField('–ö–∞—Ä—Ç–∏–Ω–∫–∞ 2',
                                upload_to='',
                                null=False,
                                )
    image_3 = models.ImageField('–ö–∞—Ä—Ç–∏–Ω–∫–∞ 3',
                                upload_to='',
                                blank=True,
                                )
    sell = models.BooleanField('–ü—Ä–æ–¥–∞–Ω–æ?', default=False)
    booking = models.BooleanField('–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ?', default=False)
    moderation = models.BooleanField('–î–æ–ø—É—â–µ–Ω –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏?', default=False)
    price = models.PositiveIntegerField('–¶–µ–Ω–∞')

    smile = models.CharField('–≠–º–æ–¥–∑–∏ –∫ —Ü–µ–Ω–µ', max_length=5, choices=choices_smile, null=True, blank=True,
                             help_text='–û—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω', default='‚ÇΩ')
    name = models.CharField('–ù–∞–∑–≤–∞–Ω–∏–µ', max_length=150, null=False,
                            help_text='–ü—Ä–∏–º–µ—Ä: iPhone 7 128 Blue ||'
                                      '–§–æ—Ä–º–∞—Ç: –ú–æ–¥–µ–ª—å/ –°–µ—Ä–∏—è/ (–ü–∞–º—è—Ç—å/ –¶–≤–µ—Ç/ –†–µ–≥–∏–æ–Ω)-> –µ—Å–ª–∏ –µ—Å—Ç—å \n ')
    name_tmp = models.CharField('–§–æ–Ω–æ–≤–æ–µ –∏–º—è', max_length=50, null=False)
    tests = models.BooleanField('–†–æ—Å—Ç–µ—Å—Ç?', default=False)
    article = models.CharField('–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞', max_length=15, null=False,
                               help_text='–ü—Ä–∏–º–µ—Ä: 20X100ZT')
    state = models.ForeignKey(StateModel, on_delete=models.CASCADE, verbose_name='–°–æ—Å—Ç–æ—è–Ω–∏–µ')
    state_akb = models.SmallIntegerField('–°–æ—Å—Ç–æ—è–Ω–∏–µ –ê–ö–ë', default=0,
                                         help_text='–û—Å—Ç–∞–≤–∏—Ç—å –≤ –ø–æ–ª–µ 0, –µ—Å–ª–∏ –ø–æ –ê–ö–ë –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
    works = models.TextField('–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã', null=True, blank=True,
                             help_text='–û—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ')
    kit = models.CharField('–ö–æ–º–ø–ª–µ–∫—Ç', choices=choices_kit, max_length=150, null=False)

    guaranty = models.ForeignKey(GuarantyModel, on_delete=models.CASCADE, verbose_name='–ì–∞—Ä–∞–Ω—Ç–∏—è')

    custom_guaranty = models.DateField('–°–≤–æ—è –≥–∞—Ä–∞–Ω—Ç–∏—è', null=True, blank=True)

    base_text = models.TextField('–ù–∏–∂–Ω—è—è –ø–æ–¥–ø–∏—Å—å –∫ –ø–æ—Å—Ç—É', null=False, default=default_text)
    day_created = models.DateTimeField('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', auto_now_add=True)
    day_next_publish = models.DateTimeField('–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞', default=get_deadline)

    category = models.ForeignKey(Category, on_delete=models.CASCADE,
                                 verbose_name='–ú–æ–¥–µ–ª—å', null=True, blank=True)
    series = models.ForeignKey(SeriesCategory, on_delete=models.CASCADE,
                               verbose_name='–°–µ—Ä–∏—è', null=True, blank=True)

    author = models.ForeignKey('auth.User', on_delete=models.CASCADE, verbose_name='–ê–≤—Ç–æ—Ä', default=1)

    count = models.SmallIntegerField('–°—á–µ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π', default=0)
    up_price = models.BooleanField('–¶–µ–Ω–∞ –ø–æ–¥–Ω—è—Ç–∞?', default=False)

    provider_device = models.CharField('–ü–æ—Å—Ç–∞–≤—â–∏–∫', max_length=50, default='–£—Å—Ç—Ä–æ–π—Å–≤–æ –∫–ª–∏–µ–Ω—Ç–∞', choices=[
        ('–£—Å—Ç—Ä–æ–π—Å–≤–æ –∫–ª–∏–µ–Ω—Ç–∞', '–£—Å—Ç—Ä–æ–π—Å–≤–æ –∫–ª–∏–µ–Ω—Ç–∞'),
        ('–ò–ª—å—è –°–∞–≤–∏—á–µ–≤', '–ò–ª—å—è –°–∞–≤–∏—á–µ–≤'),
        ('–≠–º–∏–ª—å', '–≠–º–∏–ª—å'),
    ],
                                       )
    device_provider = models.BooleanField(default=True)


    class Meta:
        verbose_name = '–ü–æ—Å—Ç'
        verbose_name_plural = '–ü–æ—Å—Ç—ã'

    def save(self, extra=None, *args, **kwargs):
        if self.sell:
            Product.objects.filter(article=self.article).update(sell=True)
        self.base_text = text_default
        price_list = []
        for element in str(self.price):
            price_list.append(element)
        last_1 = price_list.pop(-1)
        last_2 = price_list.pop(-1)
        last_3 = price_list.pop(-1)
        result_price = "".join(price_list) + '.' + last_3 + last_2 + last_1
        self.count = int(self.count) + 1

        if self.count == 1:
            self.name_tmp = str(self.name)

        if self.tests:
            self.name = str(self.name_tmp) + ' ' + '–†–æ—Å—Ç–µ—Å—Çüá∑üá∫'
        else:
            self.name = str(self.name_tmp)

        self.name = str(self.name) + ' - ' + str(result_price)

        if self.smile:
            self.name = str(self.name) + str(self.smile)

        self.base_text = str(self.name) + '\n\n' + '–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞: ' + str(self.article) + '\n\n' \
                         + str(self.state) + '\n'

        self.base_text = str(self.base_text) + '\n–ö–æ–º–ø–ª–µ–∫—Ç: ' + str(self.kit) + '\n'

        if self.state_akb != 0:
            self.base_text = str(self.base_text) + '\n–†–æ–¥–Ω–æ–π –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä: ' + str(self.state_akb) + '%\n'

        if self.works:
            self.base_text = str(self.base_text) + '\n' + str(self.works) + '\n'

        if not self.guaranty:
            castom_guarnt = datetime.datetime.strptime(str(self.custom_guaranty), '%Y-%m-%d').strftime('%d-%m-%Y')
            self.base_text = str(self.base_text) + '\n–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è Apple –¥–æ ' \
                             + str(castom_guarnt) + '\n'
        else:
            self.base_text = str(self.base_text) + '\n' + str(self.guaranty) + '\n'
        self.base_text = str(self.base_text) + default_text

        if self.device_provider:
            Product.objects.create(
                image_1=self.image_1,
                image_2=self.image_2,
                image_3=self.image_3,
                sell=False,
                booking=False,
                moderation=False,
                price=self.price,
                smile=self.smile,
                name=self.name,
                name_tmp=self.name_tmp,
                tests=self.tests,
                article=self.article,
                state=self.state,
                state_akb=self.state_akb,
                works=self.works,
                kit=self.kit,
                guaranty=self.guaranty,
                custom_guaranty=self.custom_guaranty,

                base_text=self.base_text,
                day_created=self.day_created,
                day_next_publish=self.day_next_publish,

                category=self.category,
                series=self.series,

                author=self.author,
                count=1,
                up_price=self.up_price,

                provider_device=self.provider_device,
                device_provider=self.device_provider,

            )
            self.device_provider = False
        super().save(*args, **kwargs)

    def __str__(self):
        return self.name

