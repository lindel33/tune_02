from pprint import pprint
import datetime
import MySQLdb
import telebot
from django.http import  HttpResponse
from django.views.decorators.csrf import csrf_exempt
from rest_framework.exceptions import PermissionDenied
import requests
from .models import Product, Category, SeriesCategory
from cost_models.models import DetailModel


TOKEN = '5239855839:AAG6A81Vv1BjQr1HnGtIJHxQ1rbKSc3QBs4'
<<<<<<< HEAD
URL_BITRIX = 'https://im.bitrix.info/imwebhook/eh/6c529968ec581a32c38753edca1c926a1645891257/'

=======

URL_BITRIX = 'https://im.bitrix.info/imwebhook/eh/6c529968ec581a32c38753edca1c926a164589125227/'
>>>>>>> 7cfad682a4aefd882fc86159539124b16ef59a02
client = telebot.TeleBot(TOKEN, threaded=False)
menu_support = ['üì± iPhone', 'üì≤ iPad', 'üíª MacBook',
                'üéß AirPods', '‚åö Watch',
                '‚å® –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', '‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
sup_callback = ['–ù–∞–∑–∞–¥ –∫ –ë/–£ iPhone', '–ù–∞–∑–∞–¥ –∫ –ë/–£ iPad', '–ù–∞–∑–∞–¥ –∫ –ë/–£ MacBook',
                '–ù–∞–∑–∞–¥ –∫ –ë/–£ AirPods', '–ù–∞–∑–∞–¥ –∫ –ë/–£ Watch',
                '–ù–∞–∑–∞–¥ –∫ –ë/–£ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞']

path_to_media = '/home/apple/code/project1/tune/media/'


@csrf_exempt
def bot(request):

    if request.META['CONTENT_TYPE'] == 'application/json':
        try:

            json_data = request.body.decode('utf-8')
            update = telebot.types.Update.de_json(json_data)
            client.process_new_updates([update])
            print('-----------------------4')
            return HttpResponse({'200': 'ok'})

        except:

            json_data = request.body.decode('utf-8')
            update = telebot.types.Update.de_json(json_data)
            client.process_new_updates([update])
            print('+++++++++++++++++++++++4')
            return HttpResponse({'200': 'ok'})

    else:
        raise HttpResponse({'200': 'ok'})


def get_category():
    result = ['üì± iPhone','üì≤ iPad','üíª MacBook','üéß AirPods','‚åö Watch','‚å® –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞']
    return result


def get_series(name_series):
    result = SeriesCategory.objects.filter(category__icontains=f'{name_series}')
    list_1 = []
    for i in result:
        list_1.append(i.category)
    return list_1


def get_detail_product(name_product):
    result = Product.objects.filter(name=f'{name_product}')
    return result


def get_not_category():
    result = Product.objects.all().filter(category_id=6)
    list_device = []
    for r in result:
        list_device.append(r.name)
    return list_device

def get_all_products():
    result = Product.objects.values('name').filter(sell=False).filter(booking=False).filter(moderation=True)
    list_all = []
    for i in result:
        list_all.append(i['name'])
    return list_all

def max_all_products():
    result = Product.objects.values('name')
    list_all = []
    for i in result:
        list_all.append(i['name'])
    return list_all

def get_current_product():
    result = Product.objects.values('series_id').filter(sell=False).filter(booking=False).filter(moderation=True)
    list_id = []
    exit = []
    for i in result:
        list_id.append(i['series_id'])
    for i in list_id:
        result = SeriesCategory.objects.values('category').filter(id=i)
        exit.append(result[0]['category'])
    return list(set(exit))


def get_products(category_name):
    id_category = SeriesCategory.objects.values('id').filter(category__icontains=f'{category_name}')
    result = Product.objects.values('name').filter(series_id=id_category[0]['id']).filter(booking=False).filter(sell=False).filter(moderation=True)
    list_product = []
    for i in result:
        list_product.append(i['name'])
    return list_product


def get_price(price_min, price_max):
    result = Product.objects.values('name').filter(price__gte=price_min, price__lte=price_max).filter(name__icontains=f'{"iPhone"}').filter(booking=False).filter(sell=False).filter(moderation=True)
    result = [['‚ãÖ '+ str(x['name'])] for x in result]
    print(result)
    return result

def get_max_min_price(cost):
    dia = [[15000, 25000],
             [25000, 35000],
             [35000, 45000],
             [45000, 55000],
             [55000, 70000],
             [70000, 100000]]
    for i in dia:
        if i[0] <= cost <= i[1]:
            return [i[0], i[1]]

def get_sale():
    result = Product.objects.values('name').\
        filter(sell=False).\
        filter(booking=False).\
        filter(moderation=True).\
        filter(sale=True)
    list_all = []
    for i in result:
        list_all.append(i['name'])
    return list_all
  
  
current_category = list(set([x[1] for x in get_current_product()]))
all_products = [x for x in get_all_products()]
current_product = get_current_product()
max_products = [x for x in max_all_products()]


@client.message_handler(func=lambda message: message.text == '–ó–∞–ø—É—Å–∫')
@client.message_handler(func=lambda message: message.text == '–ù–∞—á–∞–ª–æ')
@client.message_handler(func=lambda message: message.text == '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞')
@client.message_handler(func=lambda message: message.text == '–ù–∞—á–∞—Ç—å')
@client.message_handler(func=lambda message: message.text == '–°—Ç–∞—Ä—Ç')
@client.message_handler(func=lambda message: message.text == '‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
@client.message_handler(commands=['start'])
def start_message(message, text='–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏?'):
    start_category = [['üí•–°–∫–∏–¥–∫–∏üí•'], ['–ë/–£ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞'],['–ù–æ–≤—ã–µ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞'], ['Trade-in'], ['–ú–æ–π –±—é–¥–∂–µ—Ç'], ['–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º']]
    keyboard_category = telebot.types.ReplyKeyboardMarkup(True, True)
    keyboard_category.keyboard = start_category
    client.send_message(chat_id=message.chat.id,
                        text=text,
                        reply_markup=keyboard_category)


@client.message_handler(commands=['sm'])
@client.message_handler(func=lambda message: message.text == '–ë/–£ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
@client.message_handler(func=lambda message: message.text == '‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –∫ –ë/–£')
def support_menu(message, text='–í–æ—Ç –≤—Å–µ –ë\–£'):
    keyboard_category = telebot.types.ReplyKeyboardMarkup(True, True)
    keyboard_category.keyboard = [[x] for x in menu_support]
    client.send_message(chat_id=message.chat.id,
                        text=text,
                        reply_markup=keyboard_category)


@client.message_handler(func=lambda message: message.text == '‚å® –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
def supp_product(message):
    """
    –û–±—Ä–∞—Ç–æ–∫–∞ –¥–ª—è –ë\–£
    """
    products = [[x] for x in get_products(message.text.split()[1])]
    products.sort()
    if message.text in get_not_category():
        products.append(['‚¨ÖÔ∏è  –ù–∞–∑–∞–¥ –∫ –ë/–£ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º'])
    else:
        products.append(['‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –∫ –ë/–£'])

    keyboard_products = telebot.types.ReplyKeyboardMarkup(True, True)
    keyboard_products.keyboard = products
    client.send_message(chat_id=message.chat.id,
                        text='–ò—â—É: ' + message.text,
                        reply_markup=keyboard_products)



@client.message_handler(func=lambda message: message.text in menu_support)
@client.message_handler(func=lambda message: " ".join(message.text.split()[1:5]) in sup_callback)
def support_models(message):
    """
    –ü–æ–∫–∞–∂–µ—Ç –≤—Å–µ –º–æ–¥–µ–ª–∏ –≤ –Ω–∞–ª–∏—á–∏–∏
    :param message:
    :return:
    """

    if len(message.text.split()) <= 2:
        model = message.text.split()[1]
    else:
        xxx = message.text.split()
        model = xxx[4]

    models = [x for x in get_series(model) if x in current_product]
    if models == 'iPhone':
        bce = ['iPhone 5', 'iPhone 6 / 6+ / 6s / 6s+',
     'iPhone 7 / 7+', 'iPhone 8 / 8+',
     'iPhone X / XS / XS Max', 'iPhone 11 / Pro / Max',
     'iPhone 12 / Pro / Max / Mini', 'iPhone 13 / Pro / Max / Mini',
     'iPhone SE / XR']

        ect = models.copy()

        models = bce
        x = bce.copy()
        for b in ect:
            if b in x:
                x.remove(b)
        for i in x:
            models.remove(i)

    if models == []:
        support_menu(message, text='–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏ —Å–µ–π—á–∞—Å –ø—É—Å—Ç–æüòî\n'
                               '–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–∞–≤–ª–µ–Ω–∏—è–º–∏ —É –Ω–∞—Å –≤ –∫–∞–Ω–∞–ª–µ\n'
                               'https://t.me/tuneapple üëà')

        return 0

    models = [[x] for x in models]

    models.append(['‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –∫ –ë/–£'])
    keyboard_category = telebot.types.ReplyKeyboardMarkup(True, True)
    keyboard_category.keyboard = models
    client.send_message(chat_id=message.chat.id,
                        text=f'–í–æ—Ç —á—Ç–æ –µ—Å—Ç—å –∏–∑ {model}',
                        reply_markup=keyboard_category)


@client.message_handler(func=lambda message: message.text in current_product)
def support_products(message):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–µ–π –ø–æ –≤—ã–±—Ä–æ–Ω–æ–π –º–æ–¥–µ–ª–∏/ —Å–µ—Ä–∏–∏
    :param message:
    :return:
    """
    print(message.chat.id)
    products = [x for x in get_products(message.text)]

    products.sort()
    products = [[x] for x in products]

    if message.text in get_not_category():
        products.append(['‚¨ÖÔ∏è  –ù–∞–∑–∞–¥ –∫ –ë/–£ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º'])
    else:
        products.append([f'‚¨ÖÔ∏è  –ù–∞–∑–∞–¥ –∫ –ë/–£ {message.text.split()[0]}'])

    keyboard_products = telebot.types.ReplyKeyboardMarkup(True, True)
    keyboard_products.keyboard = products
    client.send_message(chat_id=message.chat.id,
                        text='–ò—â—É: ' + message.text,
                        reply_markup=keyboard_products)


dig = ['1', '2', '3', '4', '5', '6', '7', '8', '9', ]
@client.message_handler(func=lambda message: message.text in all_products)
@client.message_handler(func=lambda message: '‚ãÖ' in message.text)
@client.message_handler(func=lambda message: message.text.split()[0] == 'üîª')
def show_model(message, extra=None):
    tmp = message.text
    name_to_search = message.text
    try:
        name = message.text.split()
        if name[0] == '‚ãÖ':
            name.remove('‚ãÖ')
        if '‚ãÖ' in message.text:
            name_to_search = message.text.replace('‚ãÖ ', '')
        
        if name[0] == 'üîª':
          name.remove('üîª')
        if 'üîª' in message.text:
          name_to_search = message.text.replace('üîª ', '')
        print('--', name)
        name1 = name[0] + ' ' + name[1][0]
        products = []


        if len(name[1]) > 1 or message.text in get_not_category():

            if message.text in get_not_category():

                products = get_not_category()
            elif (name[1][0] + name[1][1] == 'XR' or name[1][0] + name[1][
                1] == 'SE') and 'watch' not in message.text.lower():

                xr = name[1][0] + name[1][1]
                products = get_products(xr)
            elif name[1][0] in dig and name[1][1] in dig:

                name_11 = name[0] + ' ' + name[1]
                products = get_products(name_11)
            else:
                products = get_products(name1)

        if len(name[1]) == 1 and message.text not in get_not_category():
            products = get_products(name1)

        if message.text in products:
            products.remove(message.text)

        detail_product = get_detail_product(name_to_search)
        print('___+++', name_to_search)
        if '‚ãÖ' in tmp:
            current_price = get_max_min_price(detail_product[0].price)
            products = get_price(current_price[0], current_price[1])
            if [tmp] in products:
                products.remove([tmp])
                products.append(['–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å|–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–π' + '\n' + message.text + ' –ê—Ä—Ç. '+detail_product[0].article])
            products.append(['‚¨ÖÔ∏è–î—Ä—É–≥–æ–π –±—é–¥–∂–µ—Ç'])
        
        elif 'üîª' in tmp:
          products = [['üîª ' + x] for x in get_sale()]
          if [tmp] in products:
              products.remove([tmp])
              products.append(['–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å|–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–π' + '\n' + tmp + ' –ê—Ä—Ç. ' + detail_product[0].article])
          products.append(['‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
          
        else:
            products = [[x] for x in products]
            products.append(['–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å|–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–π' + '\n' + message.text + ' –ê—Ä—Ç. '+detail_product[0].article])
            if message.text in get_not_category():
                products.append(['‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –∫ –ë/–£ ' + ''])
            else:
                products.append(['‚¨ÖÔ∏è  –ù–∞–∑–∞–¥ –∫ –ë/–£ ' + message.text.split()[0]])
        keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
        keyboard.keyboard = products

        if detail_product[0].image_3:
            f1, f2, f3 = open(path_to_media + str(detail_product[0].image_1), 'rb'), \
                     open(path_to_media + str(detail_product[0].image_2), 'rb'), \
                     open(path_to_media + str(detail_product[0].image_3), 'rb')
            f1, f2, f3 = f1.read(), f2.read(), f3.read()
            client.send_media_group(chat_id=message.chat.id, media=[
                telebot.types.InputMediaPhoto(f1, caption=detail_product[0].base_text),
                telebot.types.InputMediaPhoto(f2),
                telebot.types.InputMediaPhoto(f3), ])
            client.send_message(chat_id=message.chat.id,
                                text='–•–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –º–æ–¥–µ–ª—å?',
                                reply_markup=keyboard)
        else:
            f1, f2 = open(path_to_media + str(detail_product[0].image_1), 'rb'), \
                     open(path_to_media + str(detail_product[0].image_2), 'rb')

            f1, f2 = f1.read(), f2.read()
            client.send_media_group(chat_id=message.chat.id, media=[
                telebot.types.InputMediaPhoto(f1, caption=detail_product[0].base_text),
                telebot.types.InputMediaPhoto(f2)])
            client.send_message(chat_id=message.chat.id,
                                text='–•–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –º–æ–¥–µ–ª—å?',
                                reply_markup=keyboard)
    except:
        return 0








@client.message_handler(commands=['nm'])
@client.message_handler(func=lambda message: message.text == '–ù–æ–≤—ã–µ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
def new_model(message):
    start_message(message, text='–ù–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—Å–µ–≥–¥–∞ –≤ –Ω–∞–ª–∏—á–∏–∏.\n–î–ª—è –∑–∞–∫–∞–∑–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç ¬´–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º¬ª\n–ò–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: \n+7 (932) 222-54-45')



# def get_new_products():
#     try:
#         result = DetailModel.objects.values('series')

#         result = [x['series'] for x in result]
#         result = sorted(list(set(result)))
#         return result
#     except:
#         pass


# @client.message_handler(commands=['nm'])
# @client.message_handler(func=lambda message: message.text == '–ù–æ–≤—ã–µ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
# @client.message_handler(func=lambda message: message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –Ω–æ–≤—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º')
# def new_models(message):
#     try:
#         keyboard_new_products = [['üÜï iPhone'], ['‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
#         keyboard_category = telebot.types.ReplyKeyboardMarkup(True, True)
#         keyboard_category.keyboard = keyboard_new_products
#         client.send_message(chat_id=message.chat.id,
#                             text='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
#                             reply_markup=keyboard_category)

#     except:
#         pass
# @client.message_handler(func=lambda message: message.text.split()[0] == 'üÜï')
# @client.message_handler(func=lambda message: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –Ω–æ–≤—ã–º' in message.text)
# def new_models2(message):
#     try:
#         if message.text.split()[0] == 'üÜï':
#             model = message.text.split()[1]
#         else:
#             model = message.text.split()[3]
#         keyboard_new_products = [[f'‚úî {model} ' + x] for x in get_new_products()]
#         keyboard_new_products.append(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –Ω–æ–≤—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º'])
#         keyboard_category = telebot.types.ReplyKeyboardMarkup(True, True)
#         keyboard_category.keyboard = keyboard_new_products
#         client.send_message(chat_id=message.chat.id,
#                             text='–ö–∞–∫–∞—è —Å–µ—Ä–∏—è –í–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞?',
#                             reply_markup=keyboard_category)

#     except:
#         pass


# def get_price_new(series):
#     try:
#         result = DetailModel.objects.filter(series=series)

#         result = [x['series'] for x in result]
#         result = sorted(list(set(result)))
#         return result
#         correct = {
#             'iphone': 'iPhone',
#             'macbook': 'MacBook',

#         }
#         correct_list = ['iphone', 'macbook']
#         exit_list = []
#         for i in result:

#             for j in correct_list:
#                 if j in i:
#                     i = i.replace(j, correct.get(j))
#                     exit_list.append(i)
#         return list(set(exit_list))
#     except:
#         pass

# @client.message_handler(func=lambda message: message.text.split()[0] == '‚úî')
# def new_models3(message):
#     try:
#         model = message.text.split()[1]
#         series = message.text.replace('‚úî ', '')
#         series = series.replace('iPhone ', '')
#         series = get_price_new(series)
#         keyboard_new_price = [['–ó–∞–∫–∞–∑–∞—Ç—å ' + x] for x in series]
#         keyboard_new_price.append(['–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º'])
#         keyboard_new_price.append([f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –Ω–æ–≤—ã–º {model}'])
#         keyboard_category = telebot.types.ReplyKeyboardMarkup(True, True)
#         keyboard_category.keyboard = keyboard_new_price
#         client.send_message(chat_id=message.chat.id,
#                             text=f'–ê–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞ {datetime.date.today().strftime("%d.%m.%Y")}:'
#                                  f'\n\n{"".join(series)}',
#                             reply_markup=keyboard_category)
#         client.send_message(chat_id=message.chat.id,
#                             text='–î–ª—è –∑–∞–∫–∞–∑–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å\n'
#                                  '–ï—Å–ª–∏ –í—ã –Ω–µ —É–≤–∏–¥–µ–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –º–æ–¥–µ–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º',
#                             reply_markup=keyboard_category)
#     except:
#         pass






@client.message_handler(commands=['mb'])
@client.message_handler(func=lambda message: message.text == '–ú–æ–π –±—é–¥–∂–µ—Ç')
@client.message_handler(func=lambda message: message.text == '‚¨ÖÔ∏è–î—Ä—É–≥–æ–π –±—é–¥–∂–µ—Ç')
def my_budget(message, text='–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç'):
    my_dia = [['–ë—é–¥–∂–µ—Ç –æ—Ç 15000 –¥–æ 25000'],
              ['–ë—é–¥–∂–µ—Ç –æ—Ç 25000 –¥–æ 35000'],
              ['–ë—é–¥–∂–µ—Ç –æ—Ç 35000 –¥–æ 45000'],
              ['–ë—é–¥–∂–µ—Ç –æ—Ç 45000 –¥–æ 55000'],
              ['–ë—é–¥–∂–µ—Ç –æ—Ç 55000 –¥–æ 70000'],
              ['–ë—é–¥–∂–µ—Ç –æ—Ç 70000 –¥–æ 100000'],
              ['‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
    keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
    keyboard.keyboard = my_dia
    client.send_message(chat_id=message.chat.id,
                        text=text,
                        reply_markup=keyboard)





@client.message_handler(func=lambda message: message.text.split()[0] == '–ë—é–¥–∂–µ—Ç')
def my_budget_show(message):
    if len(message.text.split()) >= 4:
        try:
            price_min = message.text.split()[2]
            price_max = message.text.split()[4]
            keyboard_products = get_price(price_min, price_max)

            if keyboard_products == []:
                my_budget(message, '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
                return 0
            keyboard_products.sort()
            keyboard_products.append(['‚¨ÖÔ∏è–î—Ä—É–≥–æ–π –±—é–¥–∂–µ—Ç'])

            keyboard_category = telebot.types.ReplyKeyboardMarkup(True, True)
            keyboard_category.keyboard = keyboard_products
            client.send_message(chat_id=message.chat.id,
                                text='–í–æ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ –º–æ–¥–µ–ª–∏ –ø–æ –í–∞—à–µ–º—É –±—é–¥–∂–µ—Ç—É',
                                reply_markup=keyboard_category)
        except:
            pass

@client.message_handler(commands=['sale'])
@client.message_handler(func=lambda message: message.text == 'üí•–°–∫–∏–¥–∫–∏üí•')
def tradein_model(message):
    sale = get_sale()
    result = [['üîª ' + x] for x in sorted(sale)]
    result.append(['‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
    keyboard_products = telebot.types.ReplyKeyboardMarkup(True, True)
    keyboard_products.keyboard = result
    client.send_message(chat_id=message.chat.id,
                        text='–í–æ—Ç –≤—Å–µ —Å–∫–∏–¥–∫–∏',
                        reply_markup=keyboard_products)
          
@client.message_handler(commands=['ti'])
@client.message_handler(func=lambda message: message.text == 'Trade-in')
def tradein_model(message):
    start_message(message, text='–ü—Ä–æ–≥—Ä–∞–º–º–∞ trade-in –¥–æ—Å—Ç—É–ø–Ω–∞!\n–° –ø–æ–º–æ—â—å—é –Ω–µ–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–∞—Ç—å —Å–≤–æ–µ —Å—Ç–∞—Ä–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ Apple –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É –Ω–∞ –Ω–æ–≤–æ–µ –∏–ª–∏ –±/—É (—Ç–∞–∫ –∂–µ –ø—Ä–∏–Ω—è—Ç–æ–µ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ trade-in).\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç ¬´–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º¬ª\n–ò–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: \n+7 (932) 222-54-45')

@client.message_handler(content_types=['text'])
def bitrix_client(message):
    if message.text not in max_products:
        if message.text.split()[0] != '–ë—é–¥–∂–µ—Ç':
            try:
                print('---', message.text)
                jsn = message.__dict__.get('json')

                ts = {'update_id': 287246100,
                      'message': {'message_id': jsn['message_id'],
                                  'from': {'id': jsn['from']['id'],
                                          'is_bot': False,
                                          'first_name': jsn['from']['first_name'],
                                          'language_code': jsn['from']['language_code']},
                                  'chat': {'id': jsn['chat']['id'],
                                          'first_name': jsn['chat']['first_name'],
                                          'type': jsn['chat']['type']},
                                  'date': jsn['date'],
                                  'text': jsn['text']}}

                requests.post(URL_BITRIX, json=ts)

                if '–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å|—É–∑–Ω–∞—Ç—å' in message.text.lower() or \
                        message.text.lower() == '–∫—É–ø–∏—Ç—å –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ':
                    start_message(message, text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞,'
                    ' –æ–Ω –ø–æ–º–æ–∂–µ—Ç –í–∞–º –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–ª–∏ —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –æ –Ω–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ üë©üèª‚Äçüíª')
                if message.text.lower() == '—Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º':
                    start_message(message, text='–ß–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä\n'
                                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ')
            except Exception as _:
                try:
                    jsn = message.__dict__.get('json')
                    ts = {'update_id': 287246100,
                          'message': {'message_id': jsn['message_id'],
                                      'from': {'id': jsn['from']['id'],
                                              'is_bot': False,
                                              'first_name': jsn['from']['first_name'],
                                              'language_code': jsn['from']['language_code']},
                                      'chat': {'id': jsn['chat']['id'],
                                              'first_name': jsn['chat']['first_name'],
                                              'type': jsn['chat']['type']},
                                      'date': jsn['date'],
                                      'text': jsn['text']}}

                    requests.post(URL_BITRIX, json=ts)
                    start_message(message, text='–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é üôÑ\n'
                                                '–ù–∞–ø–∏—à–∏—Ç–µ –µ—â–µ —Ä–∞–∑')
                except:
                    start_message(message, text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞ üôÑ\n'
                                                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç'
                                                '–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É ‚Äî –í–∏–∫—Ç–æ—Ä–∏–∏ @VasViktory')

@client.message_handler(content_types=['photo'])
def photo(message):
    jsn = message.__dict__.get('json')
    exit_dict = {"update_id": 287246100} | {"message":jsn}
    requests.post(URL_BITRIX, json=exit_dict)
# # except:
# #     HttpResponse({'200': 'ok'})
